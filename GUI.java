/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GeomPack;

/**
 *
 * @author Marina Nik
 */
import java.awt.Color;
import java.awt.Graphics;
import java.util.Stack;
import java.util.ArrayList;
import java.awt.Graphics2D;
//import java.awt.geom.Path2D;
import java.awt.geom.*;
import java.io.File;
import java.io.FileNotFoundException;
import javax.swing.JFileChooser;
import java.util.Scanner;
import javax.swing.JPanel;
import java.awt.BasicStroke;
import javax.swing.filechooser.FileNameExtensionFilter;

public class GUI extends javax.swing.JFrame {

    /**
     * Creates new form GUI
     */
    public GUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        DrawingPanel = new javax.swing.JPanel();
        ImportButton = new javax.swing.JButton();
        RunButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setPreferredSize(new java.awt.Dimension(1500, 800));

        DrawingPanel.setBackground(new java.awt.Color(255, 255, 255));
        DrawingPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        DrawingPanel.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        DrawingPanel.setMinimumSize(new java.awt.Dimension(1200, 700));
        DrawingPanel.setPreferredSize(new java.awt.Dimension(1200, 700));
        DrawingPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                DrawingPanelMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout DrawingPanelLayout = new javax.swing.GroupLayout(DrawingPanel);
        DrawingPanel.setLayout(DrawingPanelLayout);
        DrawingPanelLayout.setHorizontalGroup(
            DrawingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1212, Short.MAX_VALUE)
        );
        DrawingPanelLayout.setVerticalGroup(
            DrawingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        ImportButton.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        ImportButton.setText("Import");
        ImportButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ImportButtonActionPerformed(evt);
            }
        });

        RunButton.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        RunButton.setText("Run");
        RunButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RunButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(RunButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(ImportButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 145, Short.MAX_VALUE))
                .addGap(12, 12, 12)
                .addComponent(DrawingPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 1214, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(DrawingPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 850, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(ImportButton, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(28, 28, 28)
                        .addComponent(RunButton, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 734, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ImportButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ImportButtonActionPerformed
        // TODO add your handling code here:
        points.clear();
        segments.clear();
        final JFileChooser fc = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Text Files", "txt", "doc", "log");
        fc.setFileFilter(filter);
        int val = fc.showOpenDialog(this);
        if(val == JFileChooser.APPROVE_OPTION){
            File file = fc.getSelectedFile();
            try{
                Scanner scan = new Scanner(file);
                boolean addWatcher = false;
                while (scan.hasNextLine()){
                    String temporar = scan.nextLine();
                    if (temporar.charAt(0) == '#'){
                        break;
                    }
                    else{
                        String line[] = temporar.split(" ");
                        double x = Double.parseDouble(line[0]);
                        double y = Double.parseDouble(line[1]);
                        MyPoint newPoint = new MyPoint(x, y);
                        points.add(newPoint);
                    }
                }
            }
            catch(FileNotFoundException ex){
                //graph.drawString("Failed to import file!", 500, 100);
            }
        }
        for (int i = 0; i < points.size() - 1; i++){
            MySegment segment = new MySegment(points.get(i), points.get(i + 1));
            segments.add(segment);
            points.get(i).setLineInd(i);
        }
        points.get(points.size() - 1).setLineInd(points.size() - 1);
        MySegment seg = new MySegment(points.get(points.size() - 1), points.get(0));
        segments.add(seg);
        
        double[] xs = new double[points.size()];
        double[] ys = new double[points.size()];
        for (int i = 0; i < points.size(); i++){
            xs[i] = points.get(i).getX();
            ys[i] = points.get(i).getY();
        }

        double mx = 0.0;
        double my = 0.0;
        for (int i = 0; i < points.size(); i++){
            if (xs[i] > mx)
                mx = xs[i];
            if (ys[i] > my)
                my = ys[i];
        }

        double scaleX = 1100 / mx;
        double scaleY = 600 / my;
        scale = scaleX < scaleY ? scaleX : scaleY;
        DrawingPanel.removeAll();
        for (int i = 0; i < points.size(); i++){
            MyPoint n = new MyPoint(points.get(i).getX() * scale, points.get(i).getY() * scale);
            pointsToDraw.add(n);
        }
        watcher.setX(watcher.getX() * scale);
        watcher.setY(watcher.getY() * scale);
        for (int i = 0; i < points.size() - 1; i++){
            graph.draw(new Line2D.Double(pointsToDraw.get(i).getX(), pointsToDraw.get(i).getY(), pointsToDraw.get(i + 1).getX(), pointsToDraw.get(i + 1).getY()));
            copy.draw(new Line2D.Double(pointsToDraw.get(i).getX(), pointsToDraw.get(i).getY(), pointsToDraw.get(i + 1).getX(), pointsToDraw.get(i + 1).getY()));
        }
        graph.draw(new Line2D.Double(pointsToDraw.get(pointsToDraw.size() - 1).getX(), pointsToDraw.get(pointsToDraw.size() - 1).getY(), pointsToDraw.get(0).getX(), pointsToDraw.get(0).getY()));
        copy.draw(new Line2D.Double(pointsToDraw.get(pointsToDraw.size() - 1).getX(), pointsToDraw.get(pointsToDraw.size() - 1).getY(), pointsToDraw.get(0).getX(), pointsToDraw.get(0).getY()));
        Rectangle2D.Double rect = new Rectangle2D.Double(watcher.getX() - 0.5, watcher.getY() - 0.5, 1.5, 1.5);
        graph.draw(rect);
        copy.draw(rect);
        DrawingPanel.paintComponents(graph);
        DrawingPanel.setVisible(true);
    }//GEN-LAST:event_ImportButtonActionPerformed

    private void RunButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RunButtonActionPerformed
        // TODO add your handling code here:
        ptsPerCount.clear();
        res.clear();
        toOutline.clear();
        ptsPerCount.addAll(points);  //NEEDA RETEST ALL OF THIS!!!
        MyPoint leftBase = new MyPoint(0.0, 0.0);
        MyPoint rightBase = new MyPoint(0.0, 0.0);
        boolean flagL = false, flagR = false;
        int indexLeft = 0, indexRight = 0;
        for (int i = 0; i < points.size(); i++){  //looking for the base points
            MySegment a;
            MySegment b;
            if (i == 0){
                a = new MySegment(segments.get(0));
                b = new MySegment(segments.get(segments.size() - 1));
            }
            else{
                a = new MySegment(segments.get(i - 1));
                b = new MySegment(segments.get(i));
            }
            MyLine line = new MyLine(watcher, points.get(i));
            MyPoint middleOne = new MyPoint(a.getMiddle());
            MyPoint middleTwo = new MyPoint(b.getMiddle());
            int pos1 = line.pointPos(middleOne);
            int pos2 = line.pointPos(middleTwo);
            if (pos1 != pos2 && pos1 != 0 && pos2 != 0)
                points.get(i).setType('M');
            else if (pos1 == pos2 && pos1 == 1){
                points.get(i).setType('R');
                if (!flagR && checkTruth(line)){
                    rightBase = new MyPoint(points.get(i));
                    indexRight = i;
                    flagR = true;
                }
            }
            else if ((pos1 == 0 && pos2 == 1) || (pos1 == 1 && pos2 == 0)){
                points.get(i).setType('R');
                if (!flagR && checkTruth(line)){
                    rightBase = new MyPoint(points.get(i));
                    indexRight = i;
                    flagR = true;
                }
            }
            else if (pos1 == pos2 && pos1 == -1){
                points.get(i).setType('L');
                if (!flagL && checkTruth(line)){
                    leftBase = new MyPoint(points.get(i));
                    indexLeft = i;
                    flagL = true;
                }
            }
            else if ((pos1 == 0 && pos2 == -1) || (pos1 == -1 && pos2 == 0)){
                points.get(i).setType('L');
                if (!flagL && checkTruth(line)){
                    leftBase = new MyPoint(points.get(i));
                    indexLeft = i;
                    flagL = true;
                }
            }
        }
        
        boolean inv = indexRight < indexLeft;
        //differing potentially visible points
        if (inv){
            for (int i = 0; i < points.size(); i++){
                if (i > indexLeft || i < indexRight){
                    points.get(i).setVisible(false);
                    ptsPerCount.get(i).setVisible(false);
                }
                else{
                    points.get(i).setVisible(true);
                    ptsPerCount.get(i).setVisible(true);
                }
            }
        }
            else{
                for (int i = 0; i < points.size(); i++){
                    if (i > indexLeft && i < indexRight){
                        points.get(i).setVisible(false);
                        ptsPerCount.get(i).setVisible(false);
                    }
                    else{
                        points.get(i).setVisible(true);
                        ptsPerCount.get(i).setVisible(true);
                    }
                }
            }
        
        stack.push(rightBase);  //putting right base in the stack
        boolean detectLeft = false;
        boolean detectRight = false;
        MyLine keep = new MyLine(points.get(0), points.get(0));
        //MyPoint keeper = new MyPoint(0.0, 0.0);
        int posKeeper = 0;
        
        int i = indexRight;
        //for (int i = indexRight + 1; i < indexLeft; i++){  //now here's the algorithm
        while(true){ 
            i++;
            if (i == points.size())
                i = 0;
            if (i == indexLeft)
                break;
            
            MyLine line = new MyLine(watcher, points.get(i));
            //int pos = line.pointPos(points.get(i));
            if (points.get(i).getType() == 'M' && !detectLeft && !detectRight)  //if we got a Middle point
                stack.push(points.get(i));
            else if (points.get(i).getType() == 'L'){  //if we got a Left point
                if (points.get(i).clock(points.get(i - 1), points.get(i + 1))){
                    stack.push(points.get(i));
                    detectLeft = true;
                    keep = new MyLine(line);
                    //keeper = new MyPoint(points.get(i));
                    //posKeeper = ptsPerCount.indexOf(points.get(i));
                    posKeeper = i;
                }
                else{
                    points.get(i).setVisible(false);
                    int ind = ptsPerCount.indexOf(points.get(i));
                    ptsPerCount.get(ind).setVisible(false);
                }
            }
            else if (points.get(i).getType() == 'R'){ //if we got a Right point
                if (points.get(i).clock(points.get(i - 1), points.get(i + 1))){
                    detectRight = true;
                }
                else{
                    points.get(i).setVisible(false);
                    int ind = ptsPerCount.indexOf(points.get(i));
                    ptsPerCount.get(ind).setVisible(false);
                }
            }
            
            if (detectLeft && keep.pointPos(points.get(i)) == 1){  //&& pos == 1
                MyPoint cross = keep.pointCross(segments.get(i - 1));
                cross.setVisible(true);
                cross.setLineInd(segments.indexOf(segments.get(i - 1)));
                stack.push(cross);
                detectLeft = false;
                stack.push(points.get(i));
                
                ptsPerCount.add(ptsPerCount.indexOf(points.get(i)), cross);
            }
            else if (detectLeft && keep.pointPos(points.get(i)) != 1 && posKeeper != i){ //posKeeper != points.indexOf(points.get(i))
                points.get(i).setVisible(false);
                int ind = ptsPerCount.indexOf(points.get(i));
                ptsPerCount.get(ind).setVisible(false);
            }
            //NEEDED add the decision of removing the 0-pos points
            if (detectRight){
                while(!stack.isEmpty()){
                    int posNew = line.pointPos(stack.peek());
                    if (posNew == 1){
                        int ind = ptsPerCount.indexOf(stack.peek());
                        ptsPerCount.get(ind).setVisible(false);
                        stack.pop();
                    }
                    else if (posNew == -1 || posNew == 0){
                        break;
                    }
                }
                MyPoint temp = stack.peek();
                MyPoint adder = new MyPoint(line.pointCross(segments.get(temp.getLineInd())));
                adder.setVisible(true);
                adder.setLineInd(segments.indexOf(segments.get(temp.getLineInd())));
                stack.push(adder);
                if (ptsPerCount.get(i).clock(ptsPerCount.get(i - 1), ptsPerCount.get(i + 1)))
                    stack.push(ptsPerCount.get(i));
                detectRight = false;
                
                int getter = ptsPerCount.indexOf(temp);
                ptsPerCount.add(getter + 1, adder);
            }
        }
        stack.push(leftBase);  //putting left base in the stack
        
        //now need to form the segments that we need to outline
        //ThE NEXT LOOP is for the visibility polygon sides!
        for (int j = 0; j < ptsPerCount.size() - 1; j++){
            if (ptsPerCount.get(j).getVisible() && ptsPerCount.get(j + 1).getVisible()){
                MySegment seg = new MySegment(ptsPerCount.get(j), ptsPerCount.get(j + 1));
                res.add(seg);
            }
        }
        if (!inv){
            if (ptsPerCount.get(ptsPerCount.size() - 1).getVisible() && ptsPerCount.get(0).getVisible()){
                MySegment seg = new MySegment(ptsPerCount.get(ptsPerCount.size() - 1), ptsPerCount.get(0));
                res.add(seg);
            }
        }
        
        for (int j = 0; j < stack.size() - 1; j++){
            MySegment seg = new MySegment(stack.elementAt(j), stack.elementAt(j + 1));
            toOutline.add(seg);
        }
        
        graph = (Graphics2D)DrawingPanel.getGraphics();
        graph.setStroke(new BasicStroke(1));
        graph.setColor(Color.white);
        graph.fillRect(0, 0, DrawingPanel.getWidth(), DrawingPanel.getHeight());
        graph.setColor(Color.black);
        for (int j = 0; j < pointsToDraw.size() - 1; j++){
            MyPoint beg = new MyPoint(pointsToDraw.get(j));
            MyPoint end = new MyPoint(pointsToDraw.get(j + 1));
            graph.draw(new Line2D.Double(beg.getX(), 700 - beg.getY(), end.getX(), 700 - end.getY()));
        }
        graph.draw(new Line2D.Double(pointsToDraw.get(pointsToDraw.size() - 1).getX(), 700 - pointsToDraw.get(pointsToDraw.size() - 1).getY(),
            pointsToDraw.get(0).getX(), 700 - pointsToDraw.get(0).getY()));
        //Rectangle2D.Double rect = new Rectangle2D.Double(watcher.getX()*scale - 0.5, 700 - watcher.getY()*scale - 0.5, 1, 1);  //SMTHNG wrong
        //graph.draw(rect);
        graph.fill(new Ellipse2D.Double(watcher.getX()*scale - 2.5, 700 - watcher.getY()*scale - 2.5, 5, 5));
        graph.setStroke(new BasicStroke(2));
        for (int j = 0; j < res.size(); j++){
            MyPoint ptBeg = new MyPoint(res.get(j).getStart());
            MyPoint ptEnd = new MyPoint(res.get(j).getEnd());
            graph.setColor(Color.white);
            graph.draw(new Line2D.Double(ptBeg.getX()*scale, 700 - ptBeg.getY()*scale, ptEnd.getX()*scale, 700 - ptEnd.getY()*scale));
            graph.setColor(Color.red);
            graph.draw(new Line2D.Double(ptBeg.getX()*scale, 700 - ptBeg.getY()*scale, ptEnd.getX()*scale, 700 - ptEnd.getY()*scale));
        }
        DrawingPanel.paintComponents(graph);
        DrawingPanel.setVisible(true);
    }//GEN-LAST:event_RunButtonActionPerformed

    private void DrawingPanelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_DrawingPanelMouseClicked
        // TODO add your handling code here:
        graph = (Graphics2D)DrawingPanel.getGraphics();
        graph.setColor(Color.white);
        //Rectangle2D.Double rec = new Rectangle2D.Double(scaled.getX() - 0.5, 700 - scaled.getY() - 0.5, 1, 1);
        //graph.draw(rec);
        graph.fill(new Ellipse2D.Double(scaled.getX() - 2.5, 700 - scaled.getY() - 2.5, 5, 5));
        graph.setColor(Color.black);
        DrawingPanel.paintComponents(graph);
        DrawingPanel.setVisible(true);
        double newX = evt.getX();
        double newY = 700 - evt.getY();
        scaled = new MyPoint(newX, newY);
        watcher = new MyPoint(newX / scale, newY / scale);
        //Rectangle2D.Double rect = new Rectangle2D.Double(evt.getX() - 0.5, evt.getY() - 0.5, 1, 1);
        //graph.draw(rect);
        graph.fill(new Ellipse2D.Double(evt.getX() - 2.5, evt.getY() - 2.5, 5, 5));
        DrawingPanel.paintComponents(graph);
        DrawingPanel.setVisible(true);
    }//GEN-LAST:event_DrawingPanelMouseClicked

    public static boolean checkTruth(MyLine a){
        int posCheck = 0;
        for (int i = 0; i < points.size(); i++){
            int posT = a.pointPos(points.get(i));
            if (i != 0 && posT != 0 && posT != posCheck){
                return false;
            }
            if (posT != 0)
                posCheck = posT;
        }
        return true;
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUI().setVisible(true);
                DrawingPanel.setSize(1200, 700);
                graph = (Graphics2D)DrawingPanel.getGraphics();
                graph.translate(0.0, 700.0);
                graph.scale(1, -1);
                copy = (Graphics2D)DrawingPanel.getGraphics();
                copy.translate(0.0, 700.0);
                copy.scale(1, -1);
        
                points = new ArrayList<>();
                pointsToDraw = new ArrayList<>();
                segments = new ArrayList<>();
                res = new ArrayList<>();
                stack = new Stack<>();
                toOutline = new ArrayList<>();
                watcher = new MyPoint(0.0, 0.0);
                scaled = new MyPoint(0.0, 0.0);
                ptsPerCount = new ArrayList<>();
                scale = 0.0;
                //proportion = 0.0;
            }
        });
    }

    public static MyPoint watcher;
    public static MyPoint scaled;
    public static Stack<MyPoint> stack;
    public static ArrayList<MyPoint> points;
    public static ArrayList<MyPoint> pointsToDraw;
    public static ArrayList<MySegment> segments;
    public static ArrayList<MySegment> res;
    public static ArrayList<MySegment> toOutline;
    public static ArrayList<MyPoint> ptsPerCount;
    public static Graphics2D graph;
    public static double scale;
    public static Graphics2D copy;
    //public static double proportion;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private static javax.swing.JPanel DrawingPanel;
    private javax.swing.JButton ImportButton;
    private javax.swing.JButton RunButton;
    // End of variables declaration//GEN-END:variables
}
